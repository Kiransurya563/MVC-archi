Spring MVC Framework follows the Model-View-Controller architectural design
pattern which works around the Front Controller i.e. the Dispatcher Servlet.
The Dispatcher Servlet handles and dispatches all the incoming HTTP requests
to the appropriate controller.

It uses @Controller and @RequestMapping as default request handlers.

@Controller annotation defines that a particular class is a controller.
@RequestMapping annotation maps web requests to Spring Controller methods.

Model: A model can be an object or collection of objects which basically contains the data of the application.
View:  A view is used for displaying the information to the user in a specific format. Spring supports various 
       technologies like freemarker, velocity and thymeleaf.
Controller: It contains the logical part of the application. @Controller annotation is used to mark that class
       as controller.
Front Controller: It remains responsible for managing the flow of the web application. DispatcherServlet acts 
       as a front controller in spring MVC.

Dispatcher Servlet:
------------------
when any web requests are made, the requests will come first to the front Controller
which is nothing but the Dispatcher Servlet. 
After the requests comes into this, the dispatcher servlet accepts the requests and 
decides which controller will be suitable to handle these requests. Then it dispatches
the HTTP requests to specific controller.

Spring MVC Architecture:
->All the incoming requests are intercepted by the DispatcherServlet that works
  as the front controller.
->The DispatcherServlet then gets an entry of handler mapping from the XML file and forwards
  the request to the controller.
->The object of ModelAndView is returned by the controller.
->The DispatcherServlet checks the entry of the view resolver in
  the XML file and invokes the appropriate view component.
